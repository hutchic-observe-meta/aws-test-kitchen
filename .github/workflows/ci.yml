name: PR Build Image

on:
  push:
    branches:
      - chore/ci

env:
  USER: github-action-${{ github.run_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set_output_image_name.outputs.image_name }}
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Metadata for Docker Image
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=sha,priority=1001
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set IMAGE_NAME environment variable
      id: set_output_image_name
      run: |
        IMAGE_NAME=$(echo "${DOCKER_METADATA_OUTPUT_TAGS}" | head -n 1)
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
        
    - name: Build docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: false
        push: false
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:main
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cache-to: type=gha,mode=max


  test:
    runs-on: ubuntu-latest
    needs: build
    name: test ${{ matrix.provider }}
    permissions:
      contents: write
      packages: write

    env:
      OBSERVE_CUSTOMER: ${{ secrets.OBSERVE_CUSTOMER }}
      OBSERVE_TOKEN: ${{ secrets.OBSERVE_TOKEN }}
      OBSERVE_DOMAIN: ${{ secrets.OBSERVE_DOMAIN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      IMAGE_NAME: ${{ needs.build.outputs.image_name }}

    strategy:
      matrix:
        provider: [cloudformation, terraform]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Metadata for Docker Image
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=sha,priority=1001
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        push: false
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:main
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cache-to: type=gha,mode=max

    - name: Run spec tests
      run: make docker/test
      env:
        PROVIDER: ${{ matrix.provider }}

    - name: Push Docker images
      if: success()
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:main
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cache-to: type=gha,mode=max

    - name: Teardown test infrastructure
      if: always()
      continue-on-error: true
      run: make docker/clean
      env:
        PROVIDER: ${{ matrix.provider }}